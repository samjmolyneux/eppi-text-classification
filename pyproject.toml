[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=42",
    "setuptools-scm>=3.3",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["eppi_text_classification*"]

[project]
name = "eppi_text_classification"
version = "0.0.1"
description = "Text classification of papers by titles and abstracts."
authors = [
  { name = "Sam Molyneux" },
]

readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    
]
requires-python = "~=3.11.11"
# dependencies = [
#     "pandas~=2.2.2",
#     "optuna~=3.6.1",
#     "joblib~=1.4.2",
#     "lightgbm~=4.4.0",
#     "scikit-learn~=1.5.0",
#     "xgboost~=2.1.0",
#     "spacy~=3.7.5",
#     "plotly~=5.22.0",
#     "nbformat~=5.10.4",
#     "matplotlib~=3.9.0",
#     "shap~=0.45.1",
#     "jupyter~=1.0.0",
#     "jsonpickle~=3.2.2",
#     "numpy<2.0.0",
#     "torch~=2.4.1",

# ]

dependencies = [
    "pandas~=2.2.3",
    "optuna~=4.2.1",
    "joblib~=1.4.2",
    "lightgbm~=4.6.0",
    "scikit-learn~=1.6.1",
    "xgboost~=2.1.4",
    "spacy~=3.8.4",
    "plotly~=6.00",
    "nbformat~=5.10.4",
    "matplotlib~=3.10.0",
    #"shap~=",
    "jupyter~=1.1.1",
    "jsonpickle~=4.0.2",
    "numpy~=2.1.3",
    "torch~=2.6.0",
]

# dependencies = [
#     "pandas",
#     "optuna",
#     "joblib",
#     "lightgbm",
#     "scikit-learn",
#     "xgboost",
#     "spacy",
#     "plotly",
#     "nbformat",
#     "matplotlib",
#     # "shap",
#     "jupyter",
#     "jsonpickle",
#     "numpy",
#     "torch",
# ]

[project.optional-dependencies]
# test = [
#     "mypy~=1.10.1",
#     "ruff~=0.5.0",
#     "pytest~=8.2.2",
#     "tox~=4.15.1",
#     "pandas-stubs~=2.2.2.240603",
# ]

test = [
    "mypy",
    "ruff",
    "pytest",
    "tox",
    "pandas-stubs",
]

push_azure = [
    "azure-ai-ml",
    "azure-identity",
    "python-dotenv",
]












[tool.ruff]
exclude = ["eppi_text_classification/plots/shap_colors/*"]
show-fixes = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D203",    #Docstring standards for datascience
    "D212",
    
    "T201",
    "T203",
    
    "COM812",
    "ISC001",

    "RET504", #Disables unessecary assignement before return

    "S106", #Checks for harcoded passwords in code

    "PLR0913", #Too many function parameters

    "N803", #Parameters should be lower case

    "FBT001", #Booleans as function parameters
    "FBT002",
    

    "C901", #Function complexity
    "PLR0912", #Function complexity
    "PLR0915", #Function complexity
    "ANN401", #No any return type

    "S301", #No unpickling, is unsafe
    #Maybe enable these for productionr
    "PD901", #Generic use of df

    "PLR2004", #Magic numbers 

    "N806", #Variables not in lower case  
]

fixable = [
    "W291",
    "W293",
    "F401",
    "C408",
    "RET505",
    "I001",
    "SIM118",
    "D409",
    "D413",
    "RUF022",
]

[tool.ruff.format]
docstring-code-format = true

[tool.mypy]
disable_error_code = [
    #'no-untyped-call',
    #'arg-type',
    #'has-type',
    #'operator',
    #'type-arg',
    #'var-annotated',
    #'assignment',
    #'operator',
    #'no-untyped-def',
    #'attr-defined',
    'no-any-return',
    'import-untyped'
]

warn_unused_configs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true

no_implicit_reexport = true
strict_equality = true
extra_checks = true

[[tool.mypy.overrides]]
module = ['eppi_text_classification.shap_colors.*']
disallow_untyped_calls = false
disallow_untyped_defs = false
disable_error_code = ['index', 'arg-type', 'type-var']


[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
]
