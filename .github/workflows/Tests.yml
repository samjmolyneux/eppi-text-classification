name: Tests

on:
  push:
    branches:
      - dev

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.11']
      fail-fast: false
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install .[test]
        python -m spacy download en_core_web_sm

    - name: Check correct installation
      run: python tests/check_install.py
      continue-on-error: true

    - name: Test with Ruff
      id: lint
      run: ruff check eppi_text_classification/
      continue-on-error: true

    - name: Set Lint Success
      id: set-lint-success
      run: echo "${{ steps.lint.outcome == 'success' }}" > lint_success.txt
      continue-on-error: true

    - name: Test with MyPy
      id: type_check
      run: mypy -p eppi_text_classification
      continue-on-error: true

    - name: Set Type Check Success
      id: set-type-check-success
      run: echo "${{ steps.type_check.outcome == 'success' }}" > type_check_success.txt
      continue-on-error: true

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          lint_success.txt
          type_check_success.txt

  aggregate-results:
    runs-on: ubuntu-latest
    needs: test
    steps:

    - uses: actions/checkout@v4  # Ensure the repository is checked out
      with:
        fetch-depth: 0  # Fetch all history for accurate commit information

    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Aggregate Lint Results
      id: aggregate-lint
      run: |
        lint_success=true
        for file in ./artifacts/**/lint_success.txt; do
          if grep -q "false" "$file"; then
            lint_success=false
            break
          fi
        done
        if [ "$lint_success" = true ]; then
          echo "::set-output name=lint_badge_output::passing"
        else
          echo "::set-output name=lint_badge_output::failed"
        fi

    - name: Aggregate Type Check Results
      id: aggregate-type-check
      run: |
        type_check_success=true
        for file in ./artifacts/**/type_check_success.txt; do
          if grep -q "false" "$file"; then
            type_check_success=false
            break
          fi
        done
        if [ "$type_check_success" = true ]; then
          echo "::set-output name=mypy_output::passing"
        else
          echo "::set-output name=mypy_output::failed"
        fi

    - name: Upload Linting Badge
      uses: RubbaBoy/BYOB@v1.3.0
      with:
        NAME: ruff-badge
        LABEL: 'Ruff'
        ICON: 'github'
        STATUS: ${{ steps.aggregate-lint.outputs.lint_badge_output }}
        COLOR: green
        BRANCH: 'dev'
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Type Checking Badge
      uses: RubbaBoy/BYOB@v1.3.0
      with:
        NAME: mypy-badge
        LABEL: 'MyPy'
        ICON: 'github'
        STATUS: ${{ steps.aggregate-type-check.outputs.mypy_output }}
        COLOR: green
        BRANCH: 'dev'
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create new mypy badge
      uses: schneegans/dynamic-badges-action@v1.7.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 8eecb8c8d4f9050a92f87c4f8cb859f3
        filename: badge.json # Use test.svg if you want to use the SVG mode.
        label: MyPy
        message: ${{ steps.aggregate-type-check.outputs.mypy_output }}
        color: green

    
    # - name: Update README with Badges
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   run: |
    #     git config --global user.name 'github-actions[bot]'
    #     git config --global user.email 'github-actions[bot]@users.noreply.github.com'
    #     git add README.md
    #     git commit -m 'Update badges in the readme'
    #     git push

  #We should add an additional condtional at each upload that says that if the output is true then its passing, but if it is anything else then it should be set to failed.
  #We should try to put the badges in my current repo to see if it makes them update instantly.